//go:build ignore

//
// Go generator to create module_embed.go

package main

import (
	"log"
	"os"
	"path/filepath"
	"runtime"
	"text/template"
)

const outputFile = "module_embed.go"

type tplArgs struct {
	Module string
}

var fileTemplate = `//go:build windows
// Code generated by a tool; DO NOT EDIT.
package psmodule

import "embed"

//go:embed {{ .Module }}
//go:embed install-module.ps1
var moduleFiles embed.FS
`

func generate(pkg string) {

	tmpl, err := template.New("tpl").Parse(fileTemplate)
	if err != nil {
		log.Fatalf("Error parsing template for %s: %v", outputFile, err)
	}

	f, err := os.OpenFile(outputFile, os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("Error creating %s: %v", outputFile, err)
	}
	defer f.Close()

	args := tplArgs{
		Module: filepath.Base(pkg),
	}

	if err := tmpl.Execute(f, args); err != nil {
		log.Fatalf("Error writing %s: %v", outputFile, err)
	}

	log.Printf("Generated %s for %s", outputFile, args.Module)
}

func main() {

	log.Printf("Generating %s", outputFile)
	if runtime.GOOS != "windows" {
		// Nothing to do here
		log.Printf("Nothing to do for %s", runtime.GOOS)
		return
	}

	nupkg, _ := filepath.Glob("*.nupkg")

	switch len(nupkg) {
	case 0:
		log.Fatalf("Cannot find powershell module. Run 'make powershell' first.")
	case 1:
		generate(nupkg[0])
	default:
		log.Fatalf("Multiple module packages found. Run 'make powershell'.")
	}
}
