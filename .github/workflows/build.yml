name: build
on: [push, pull_request]
jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # so we can diff against previous commit

      - id: check
        run: |
          echo "Checking conditions to skip workflow..."

          # Get latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Check for NO-CI
          if echo "$COMMIT_MSG" | grep -q "NO-CI"; then
            echo "NO-CI found in commit message. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get changed files
          CHANGED=$(git diff --name-only HEAD~1)
          echo "Changed files:"
          echo "$CHANGED"

          # If all changed files are markdown
          if [ -n "$CHANGED" ] && ! echo "$CHANGED" | grep -vqE '\.md$'; then
            echo "Only markdown files changed. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No skip conditions met."
          echo "skip=false" >> $GITHUB_OUTPUT

  lint:
    needs: precheck
    if: ${{ needs.precheck.outputs.skip != 'true' }}
    runs-on: ubuntu-latest
    env:
      GO111MODULE: "on"
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Go modules
        run: go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0

      # - name: Install Helm
      #   uses: azure/setup-helm@v4.3.0

      # - name: helm-lint
      #   run: helm lint --set apiKey=meh --set controller.serviceUrl=http://example.com chart

  # windows-service:
  #   needs: lint
  #   runs-on: windows-2022
  #   env:
  #     GO111MODULE: "on"
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.25.1'
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download Go modules
  #       run: go mod download

  #     - name: Test
  #       run: make test
  #       shell: cmd

  #     - name: Build
  #       run: |
  #         make executable
  #       shell: cmd

  #     - name: 'Upload Artifact'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-service
  #         path: ${{ env.ARTIFACT }}
  #         retention-days: 1

  linux-csi-driver:
    needs: lint
    runs-on: ubuntu-latest
    env:
      GO111MODULE: "on"
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Go modules
        run: go mod download

      - name: Test
        run: make test

      - name: Build
        run: |
          make executable

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: linux-csi-driver
          path: ${{ env.ARTIFACT }}
          retention-days: 1

  publish:
    needs:
    #- windows-service
    - linux-csi-driver
    runs-on: ubuntu-latest
    steps:
      - name: 'Download Artifact'
        uses: actions/download-artifact@v4
        with:
          path: ./

      - name: check-artifacts
        run: ls -lR

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Checkout code
        uses: actions/checkout@v4

      - name: build-image
        run: |
          driver=$(basename "$(find ./linux-csi-driver -type f -name '*')")
          cp /linux-csi-driver/$driver $driver
          chmod +x $driver
          docker build -t $driver --build-arg EXECUTABLE=$driver -f docker/Dockerfile .

