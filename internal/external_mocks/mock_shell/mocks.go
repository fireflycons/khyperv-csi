// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_shell

import (
	"context"

	"github.com/coreos/go-semver/semver"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShell creates a new instance of MockShell. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShell(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShell {
	mock := &MockShell{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShell is an autogenerated mock type for the Shell type
type MockShell struct {
	mock.Mock
}

type MockShell_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShell) EXPECT() *MockShell_Expecter {
	return &MockShell_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockShell
func (_mock *MockShell) Execute(cmd string) (string, string, error) {
	ret := _mock.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return returnFunc(cmd)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(cmd)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(cmd)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(cmd)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockShell_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockShell_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - cmd string
func (_e *MockShell_Expecter) Execute(cmd interface{}) *MockShell_Execute_Call {
	return &MockShell_Execute_Call{Call: _e.mock.On("Execute", cmd)}
}

func (_c *MockShell_Execute_Call) Run(run func(cmd string)) *MockShell_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShell_Execute_Call) Return(s string, s1 string, err error) *MockShell_Execute_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockShell_Execute_Call) RunAndReturn(run func(cmd string) (string, string, error)) *MockShell_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScript provides a mock function for the type MockShell
func (_mock *MockShell) ExecuteScript(scriptOrPath string) (string, string, error) {
	ret := _mock.Called(scriptOrPath)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScript")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return returnFunc(scriptOrPath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(scriptOrPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(scriptOrPath)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(scriptOrPath)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockShell_ExecuteScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScript'
type MockShell_ExecuteScript_Call struct {
	*mock.Call
}

// ExecuteScript is a helper method to define mock.On call
//   - scriptOrPath string
func (_e *MockShell_Expecter) ExecuteScript(scriptOrPath interface{}) *MockShell_ExecuteScript_Call {
	return &MockShell_ExecuteScript_Call{Call: _e.mock.On("ExecuteScript", scriptOrPath)}
}

func (_c *MockShell_ExecuteScript_Call) Run(run func(scriptOrPath string)) *MockShell_ExecuteScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShell_ExecuteScript_Call) Return(s string, s1 string, err error) *MockShell_ExecuteScript_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockShell_ExecuteScript_Call) RunAndReturn(run func(scriptOrPath string) (string, string, error)) *MockShell_ExecuteScript_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptWithContext provides a mock function for the type MockShell
func (_mock *MockShell) ExecuteScriptWithContext(ctx context.Context, scriptOrPath string) (string, string, error) {
	ret := _mock.Called(ctx, scriptOrPath)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptWithContext")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return returnFunc(ctx, scriptOrPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, scriptOrPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = returnFunc(ctx, scriptOrPath)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, scriptOrPath)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockShell_ExecuteScriptWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptWithContext'
type MockShell_ExecuteScriptWithContext_Call struct {
	*mock.Call
}

// ExecuteScriptWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - scriptOrPath string
func (_e *MockShell_Expecter) ExecuteScriptWithContext(ctx interface{}, scriptOrPath interface{}) *MockShell_ExecuteScriptWithContext_Call {
	return &MockShell_ExecuteScriptWithContext_Call{Call: _e.mock.On("ExecuteScriptWithContext", ctx, scriptOrPath)}
}

func (_c *MockShell_ExecuteScriptWithContext_Call) Run(run func(ctx context.Context, scriptOrPath string)) *MockShell_ExecuteScriptWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShell_ExecuteScriptWithContext_Call) Return(s string, s1 string, err error) *MockShell_ExecuteScriptWithContext_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockShell_ExecuteScriptWithContext_Call) RunAndReturn(run func(ctx context.Context, scriptOrPath string) (string, string, error)) *MockShell_ExecuteScriptWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteWithContext provides a mock function for the type MockShell
func (_mock *MockShell) ExecuteWithContext(ctx context.Context, cmd string) (string, string, error) {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithContext")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return returnFunc(ctx, cmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = returnFunc(ctx, cmd)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, cmd)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockShell_ExecuteWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWithContext'
type MockShell_ExecuteWithContext_Call struct {
	*mock.Call
}

// ExecuteWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd string
func (_e *MockShell_Expecter) ExecuteWithContext(ctx interface{}, cmd interface{}) *MockShell_ExecuteWithContext_Call {
	return &MockShell_ExecuteWithContext_Call{Call: _e.mock.On("ExecuteWithContext", ctx, cmd)}
}

func (_c *MockShell_ExecuteWithContext_Call) Run(run func(ctx context.Context, cmd string)) *MockShell_ExecuteWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShell_ExecuteWithContext_Call) Return(s string, s1 string, err error) *MockShell_ExecuteWithContext_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockShell_ExecuteWithContext_Call) RunAndReturn(run func(ctx context.Context, cmd string) (string, string, error)) *MockShell_ExecuteWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Exit provides a mock function for the type MockShell
func (_mock *MockShell) Exit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShell_Exit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exit'
type MockShell_Exit_Call struct {
	*mock.Call
}

// Exit is a helper method to define mock.On call
func (_e *MockShell_Expecter) Exit() *MockShell_Exit_Call {
	return &MockShell_Exit_Call{Call: _e.mock.On("Exit")}
}

func (_c *MockShell_Exit_Call) Run(run func()) *MockShell_Exit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShell_Exit_Call) Return(err error) *MockShell_Exit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShell_Exit_Call) RunAndReturn(run func() error) *MockShell_Exit_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockShell
func (_mock *MockShell) Version() *semver.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *semver.Version
	if returnFunc, ok := ret.Get(0).(func() *semver.Version); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*semver.Version)
		}
	}
	return r0
}

// MockShell_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockShell_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockShell_Expecter) Version() *MockShell_Version_Call {
	return &MockShell_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockShell_Version_Call) Run(run func()) *MockShell_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShell_Version_Call) Return(version *semver.Version) *MockShell_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *MockShell_Version_Call) RunAndReturn(run func() *semver.Version) *MockShell_Version_Call {
	_c.Call.Return(run)
	return _c
}
