//go:build linux

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package driver

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/mount-utils"
)

// NewMockAttachmentValidator creates a new instance of MockAttachmentValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttachmentValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttachmentValidator {
	mock := &MockAttachmentValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAttachmentValidator is an autogenerated mock type for the AttachmentValidator type
type MockAttachmentValidator struct {
	mock.Mock
}

type MockAttachmentValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttachmentValidator) EXPECT() *MockAttachmentValidator_Expecter {
	return &MockAttachmentValidator_Expecter{mock: &_m.Mock}
}

// evalSymlinks provides a mock function for the type MockAttachmentValidator
func (_mock *MockAttachmentValidator) evalSymlinks(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for evalSymlinks")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttachmentValidator_evalSymlinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'evalSymlinks'
type MockAttachmentValidator_evalSymlinks_Call struct {
	*mock.Call
}

// evalSymlinks is a helper method to define mock.On call
//   - path string
func (_e *MockAttachmentValidator_Expecter) evalSymlinks(path interface{}) *MockAttachmentValidator_evalSymlinks_Call {
	return &MockAttachmentValidator_evalSymlinks_Call{Call: _e.mock.On("evalSymlinks", path)}
}

func (_c *MockAttachmentValidator_evalSymlinks_Call) Run(run func(path string)) *MockAttachmentValidator_evalSymlinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAttachmentValidator_evalSymlinks_Call) Return(s string, err error) *MockAttachmentValidator_evalSymlinks_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAttachmentValidator_evalSymlinks_Call) RunAndReturn(run func(path string) (string, error)) *MockAttachmentValidator_evalSymlinks_Call {
	_c.Call.Return(run)
	return _c
}

// readFile provides a mock function for the type MockAttachmentValidator
func (_mock *MockAttachmentValidator) readFile(name string) ([]byte, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for readFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttachmentValidator_readFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readFile'
type MockAttachmentValidator_readFile_Call struct {
	*mock.Call
}

// readFile is a helper method to define mock.On call
//   - name string
func (_e *MockAttachmentValidator_Expecter) readFile(name interface{}) *MockAttachmentValidator_readFile_Call {
	return &MockAttachmentValidator_readFile_Call{Call: _e.mock.On("readFile", name)}
}

func (_c *MockAttachmentValidator_readFile_Call) Run(run func(name string)) *MockAttachmentValidator_readFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAttachmentValidator_readFile_Call) Return(bytes []byte, err error) *MockAttachmentValidator_readFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockAttachmentValidator_readFile_Call) RunAndReturn(run func(name string) ([]byte, error)) *MockAttachmentValidator_readFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMounter creates a new instance of MockMounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMounter {
	mock := &MockMounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMounter is an autogenerated mock type for the Mounter type
type MockMounter struct {
	mock.Mock
}

type MockMounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMounter) EXPECT() *MockMounter_Expecter {
	return &MockMounter_Expecter{mock: &_m.Mock}
}

// Format provides a mock function for the type MockMounter
func (_mock *MockMounter) Format(source string, fsType string) error {
	ret := _mock.Called(source, fsType)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(source, fsType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMounter_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type MockMounter_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - source string
//   - fsType string
func (_e *MockMounter_Expecter) Format(source interface{}, fsType interface{}) *MockMounter_Format_Call {
	return &MockMounter_Format_Call{Call: _e.mock.On("Format", source, fsType)}
}

func (_c *MockMounter_Format_Call) Run(run func(source string, fsType string)) *MockMounter_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMounter_Format_Call) Return(err error) *MockMounter_Format_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMounter_Format_Call) RunAndReturn(run func(source string, fsType string) error) *MockMounter_Format_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceName provides a mock function for the type MockMounter
func (_mock *MockMounter) GetDeviceName(mounter mount.Interface, mountPath string) (string, error) {
	ret := _mock.Called(mounter, mountPath)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(mount.Interface, string) (string, error)); ok {
		return returnFunc(mounter, mountPath)
	}
	if returnFunc, ok := ret.Get(0).(func(mount.Interface, string) string); ok {
		r0 = returnFunc(mounter, mountPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(mount.Interface, string) error); ok {
		r1 = returnFunc(mounter, mountPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMounter_GetDeviceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceName'
type MockMounter_GetDeviceName_Call struct {
	*mock.Call
}

// GetDeviceName is a helper method to define mock.On call
//   - mounter mount.Interface
//   - mountPath string
func (_e *MockMounter_Expecter) GetDeviceName(mounter interface{}, mountPath interface{}) *MockMounter_GetDeviceName_Call {
	return &MockMounter_GetDeviceName_Call{Call: _e.mock.On("GetDeviceName", mounter, mountPath)}
}

func (_c *MockMounter_GetDeviceName_Call) Run(run func(mounter mount.Interface, mountPath string)) *MockMounter_GetDeviceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mount.Interface
		if args[0] != nil {
			arg0 = args[0].(mount.Interface)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMounter_GetDeviceName_Call) Return(s string, err error) *MockMounter_GetDeviceName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMounter_GetDeviceName_Call) RunAndReturn(run func(mounter mount.Interface, mountPath string) (string, error)) *MockMounter_GetDeviceName_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type MockMounter
func (_mock *MockMounter) GetStatistics(volumePath string) (volumeStatistics, error) {
	ret := _mock.Called(volumePath)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 volumeStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (volumeStatistics, error)); ok {
		return returnFunc(volumePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) volumeStatistics); ok {
		r0 = returnFunc(volumePath)
	} else {
		r0 = ret.Get(0).(volumeStatistics)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(volumePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMounter_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type MockMounter_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - volumePath string
func (_e *MockMounter_Expecter) GetStatistics(volumePath interface{}) *MockMounter_GetStatistics_Call {
	return &MockMounter_GetStatistics_Call{Call: _e.mock.On("GetStatistics", volumePath)}
}

func (_c *MockMounter_GetStatistics_Call) Run(run func(volumePath string)) *MockMounter_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_GetStatistics_Call) Return(volumeStatisticsMoqParam volumeStatistics, err error) *MockMounter_GetStatistics_Call {
	_c.Call.Return(volumeStatisticsMoqParam, err)
	return _c
}

func (_c *MockMounter_GetStatistics_Call) RunAndReturn(run func(volumePath string) (volumeStatistics, error)) *MockMounter_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// IsAttached provides a mock function for the type MockMounter
func (_mock *MockMounter) IsAttached(source string) error {
	ret := _mock.Called(source)

	if len(ret) == 0 {
		panic("no return value specified for IsAttached")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(source)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMounter_IsAttached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAttached'
type MockMounter_IsAttached_Call struct {
	*mock.Call
}

// IsAttached is a helper method to define mock.On call
//   - source string
func (_e *MockMounter_Expecter) IsAttached(source interface{}) *MockMounter_IsAttached_Call {
	return &MockMounter_IsAttached_Call{Call: _e.mock.On("IsAttached", source)}
}

func (_c *MockMounter_IsAttached_Call) Run(run func(source string)) *MockMounter_IsAttached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_IsAttached_Call) Return(err error) *MockMounter_IsAttached_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMounter_IsAttached_Call) RunAndReturn(run func(source string) error) *MockMounter_IsAttached_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlockDevice provides a mock function for the type MockMounter
func (_mock *MockMounter) IsBlockDevice(volumePath string) (bool, error) {
	ret := _mock.Called(volumePath)

	if len(ret) == 0 {
		panic("no return value specified for IsBlockDevice")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(volumePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(volumePath)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(volumePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMounter_IsBlockDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlockDevice'
type MockMounter_IsBlockDevice_Call struct {
	*mock.Call
}

// IsBlockDevice is a helper method to define mock.On call
//   - volumePath string
func (_e *MockMounter_Expecter) IsBlockDevice(volumePath interface{}) *MockMounter_IsBlockDevice_Call {
	return &MockMounter_IsBlockDevice_Call{Call: _e.mock.On("IsBlockDevice", volumePath)}
}

func (_c *MockMounter_IsBlockDevice_Call) Run(run func(volumePath string)) *MockMounter_IsBlockDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_IsBlockDevice_Call) Return(b bool, err error) *MockMounter_IsBlockDevice_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockMounter_IsBlockDevice_Call) RunAndReturn(run func(volumePath string) (bool, error)) *MockMounter_IsBlockDevice_Call {
	_c.Call.Return(run)
	return _c
}

// IsFormatted provides a mock function for the type MockMounter
func (_mock *MockMounter) IsFormatted(source string) (bool, error) {
	ret := _mock.Called(source)

	if len(ret) == 0 {
		panic("no return value specified for IsFormatted")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(source)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(source)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(source)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMounter_IsFormatted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFormatted'
type MockMounter_IsFormatted_Call struct {
	*mock.Call
}

// IsFormatted is a helper method to define mock.On call
//   - source string
func (_e *MockMounter_Expecter) IsFormatted(source interface{}) *MockMounter_IsFormatted_Call {
	return &MockMounter_IsFormatted_Call{Call: _e.mock.On("IsFormatted", source)}
}

func (_c *MockMounter_IsFormatted_Call) Run(run func(source string)) *MockMounter_IsFormatted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_IsFormatted_Call) Return(b bool, err error) *MockMounter_IsFormatted_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockMounter_IsFormatted_Call) RunAndReturn(run func(source string) (bool, error)) *MockMounter_IsFormatted_Call {
	_c.Call.Return(run)
	return _c
}

// IsMounted provides a mock function for the type MockMounter
func (_mock *MockMounter) IsMounted(target string) (bool, error) {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for IsMounted")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(target)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMounter_IsMounted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMounted'
type MockMounter_IsMounted_Call struct {
	*mock.Call
}

// IsMounted is a helper method to define mock.On call
//   - target string
func (_e *MockMounter_Expecter) IsMounted(target interface{}) *MockMounter_IsMounted_Call {
	return &MockMounter_IsMounted_Call{Call: _e.mock.On("IsMounted", target)}
}

func (_c *MockMounter_IsMounted_Call) Run(run func(target string)) *MockMounter_IsMounted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_IsMounted_Call) Return(b bool, err error) *MockMounter_IsMounted_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockMounter_IsMounted_Call) RunAndReturn(run func(target string) (bool, error)) *MockMounter_IsMounted_Call {
	_c.Call.Return(run)
	return _c
}

// Mount provides a mock function for the type MockMounter
func (_mock *MockMounter) Mount(source string, target string, fsType string, options ...string) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(source, target, fsType, options)
	} else {
		tmpRet = _mock.Called(source, target, fsType)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Mount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, ...string) error); ok {
		r0 = returnFunc(source, target, fsType, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMounter_Mount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mount'
type MockMounter_Mount_Call struct {
	*mock.Call
}

// Mount is a helper method to define mock.On call
//   - source string
//   - target string
//   - fsType string
//   - options ...string
func (_e *MockMounter_Expecter) Mount(source interface{}, target interface{}, fsType interface{}, options ...interface{}) *MockMounter_Mount_Call {
	return &MockMounter_Mount_Call{Call: _e.mock.On("Mount",
		append([]interface{}{source, target, fsType}, options...)...)}
}

func (_c *MockMounter_Mount_Call) Run(run func(source string, target string, fsType string, options ...string)) *MockMounter_Mount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockMounter_Mount_Call) Return(err error) *MockMounter_Mount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMounter_Mount_Call) RunAndReturn(run func(source string, target string, fsType string, options ...string) error) *MockMounter_Mount_Call {
	_c.Call.Return(run)
	return _c
}

// Unmount provides a mock function for the type MockMounter
func (_mock *MockMounter) Unmount(target string) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Unmount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMounter_Unmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmount'
type MockMounter_Unmount_Call struct {
	*mock.Call
}

// Unmount is a helper method to define mock.On call
//   - target string
func (_e *MockMounter_Expecter) Unmount(target interface{}) *MockMounter_Unmount_Call {
	return &MockMounter_Unmount_Call{Call: _e.mock.On("Unmount", target)}
}

func (_c *MockMounter_Unmount_Call) Run(run func(target string)) *MockMounter_Unmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMounter_Unmount_Call) Return(err error) *MockMounter_Unmount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMounter_Unmount_Call) RunAndReturn(run func(target string) error) *MockMounter_Unmount_Call {
	_c.Call.Return(run)
	return _c
}
