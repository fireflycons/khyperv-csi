// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kvp

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetadataService creates a new instance of MockMetadataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataService {
	mock := &MockMetadataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetadataService is an autogenerated mock type for the MetadataService type
type MockMetadataService struct {
	mock.Mock
}

type MockMetadataService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataService) EXPECT() *MockMetadataService_Expecter {
	return &MockMetadataService_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockMetadataService
func (_mock *MockMetadataService) Find(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockMetadataService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - key string
func (_e *MockMetadataService_Expecter) Find(key interface{}) *MockMetadataService_Find_Call {
	return &MockMetadataService_Find_Call{Call: _e.mock.On("Find", key)}
}

func (_c *MockMetadataService_Find_Call) Run(run func(key string)) *MockMetadataService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetadataService_Find_Call) Return(s string, err error) *MockMetadataService_Find_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadataService_Find_Call) RunAndReturn(run func(key string) (string, error)) *MockMetadataService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// IsPresent provides a mock function for the type MockMetadataService
func (_mock *MockMetadataService) IsPresent() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPresent")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockMetadataService_IsPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPresent'
type MockMetadataService_IsPresent_Call struct {
	*mock.Call
}

// IsPresent is a helper method to define mock.On call
func (_e *MockMetadataService_Expecter) IsPresent() *MockMetadataService_IsPresent_Call {
	return &MockMetadataService_IsPresent_Call{Call: _e.mock.On("IsPresent")}
}

func (_c *MockMetadataService_IsPresent_Call) Run(run func()) *MockMetadataService_IsPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadataService_IsPresent_Call) Return(b bool) *MockMetadataService_IsPresent_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockMetadataService_IsPresent_Call) RunAndReturn(run func() bool) *MockMetadataService_IsPresent_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockMetadataService
func (_mock *MockMetadataService) Read(poolNumber int, key string) (string, error) {
	ret := _mock.Called(poolNumber, key)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string) (string, error)); ok {
		return returnFunc(poolNumber, key)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string) string); ok {
		r0 = returnFunc(poolNumber, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = returnFunc(poolNumber, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockMetadataService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - poolNumber int
//   - key string
func (_e *MockMetadataService_Expecter) Read(poolNumber interface{}, key interface{}) *MockMetadataService_Read_Call {
	return &MockMetadataService_Read_Call{Call: _e.mock.On("Read", poolNumber, key)}
}

func (_c *MockMetadataService_Read_Call) Run(run func(poolNumber int, key string)) *MockMetadataService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetadataService_Read_Call) Return(s string, err error) *MockMetadataService_Read_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadataService_Read_Call) RunAndReturn(run func(poolNumber int, key string) (string, error)) *MockMetadataService_Read_Call {
	_c.Call.Return(run)
	return _c
}
